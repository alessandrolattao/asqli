package cli

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/lipgloss"
)

// renderInfoView renders the query information view showing the last executed query.
// It displays both the user's original prompt and the SQL query generated by the AI,
// providing transparency into what was actually sent to the database.
func (m Model) renderInfoView() string {
	if len(m.queryHistory) == 0 {
		noInfoMsg := subtleStyle.Render("No query information available")
		return lipgloss.Place(m.width, m.height, lipgloss.Center, lipgloss.Center, noInfoMsg)
	}

	// Get the last query
	lastQuery := m.queryHistory[len(m.queryHistory)-1]

	// Styles
	titleStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FFB6C1")).
		Bold(true).
		Padding(0, 1)

	labelStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FFB6C1")).
		Bold(true)

	contentStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#E0E0E0")).
		Padding(0, 2)

	sqlStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#98C379")).
		Padding(0, 2)

	boxStyle := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("#FFB6C1")).
		Padding(1, 2).
		Width(m.width - 6)

	// Build content
	var content strings.Builder

	content.WriteString(titleStyle.Render("Last Query Information"))
	content.WriteString("\n\n")

	// User prompt
	content.WriteString(labelStyle.Render("User Prompt:"))
	content.WriteString("\n")
	content.WriteString(contentStyle.Render(lastQuery.Prompt))
	content.WriteString("\n\n")

	// Generated SQL
	content.WriteString(labelStyle.Render("Generated SQL:"))
	content.WriteString("\n")

	// Format SQL with line breaks if too long
	sqlLines := wrapText(lastQuery.SQL, m.width-10)
	for _, line := range sqlLines {
		content.WriteString(sqlStyle.Render(line))
		content.WriteString("\n")
	}

	// Debug information
	if lastQuery.Usage.Provider != "" {
		content.WriteString("\n")
		content.WriteString(labelStyle.Render("Debug Info:"))
		content.WriteString("\n")

		// Provider
		content.WriteString(contentStyle.Render(fmt.Sprintf("Provider: %s", lastQuery.Usage.Provider)))
		content.WriteString("\n")

		// Model
		if lastQuery.Usage.Model != "" {
			content.WriteString(contentStyle.Render(fmt.Sprintf("Model: %s", lastQuery.Usage.Model)))
			content.WriteString("\n")
		}

		// Token usage
		if lastQuery.Usage.TotalTokens > 0 {
			content.WriteString(contentStyle.Render(fmt.Sprintf("Tokens: %d (prompt: %d, response: %d)",
				lastQuery.Usage.TotalTokens,
				lastQuery.Usage.PromptTokens,
				lastQuery.Usage.ResponseTokens)))
			content.WriteString("\n")

			// Show cached tokens if present
			if lastQuery.Usage.CachedTokens > 0 {
				content.WriteString(contentStyle.Render(fmt.Sprintf("Cached: %d tokens", lastQuery.Usage.CachedTokens)))
				content.WriteString("\n")
			}
		}
	}

	content.WriteString("\n")
	content.WriteString(subtleStyle.Render("Press Esc to close"))

	boxed := boxStyle.Render(content.String())

	// Center the box
	return lipgloss.Place(m.width, m.height, lipgloss.Center, lipgloss.Center, boxed)
}
